/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { Post } from "../../post/base/Post";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { ChallengeFindManyArgs } from "../../challenge/base/ChallengeFindManyArgs";
import { Challenge } from "../../challenge/base/Challenge";
import { ChallengeWhereUniqueInput } from "../../challenge/base/ChallengeWhereUniqueInput";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { CommentWhereUniqueInput } from "../../comment/base/CommentWhereUniqueInput";
import { DiscussionForumFindManyArgs } from "../../discussionForum/base/DiscussionForumFindManyArgs";
import { DiscussionForum } from "../../discussionForum/base/DiscussionForum";
import { DiscussionForumWhereUniqueInput } from "../../discussionForum/base/DiscussionForumWhereUniqueInput";
import { LikeFindManyArgs } from "../../like/base/LikeFindManyArgs";
import { Like } from "../../like/base/Like";
import { LikeWhereUniqueInput } from "../../like/base/LikeWhereUniqueInput";
import { LiveSessionFindManyArgs } from "../../liveSession/base/LiveSessionFindManyArgs";
import { LiveSession } from "../../liveSession/base/LiveSession";
import { LiveSessionWhereUniqueInput } from "../../liveSession/base/LiveSessionWhereUniqueInput";
import { PostFindManyArgs } from "../../post/base/PostFindManyArgs";
import { PostWhereUniqueInput } from "../../post/base/PostWhereUniqueInput";
import { RecipeFindManyArgs } from "../../recipe/base/RecipeFindManyArgs";
import { Recipe } from "../../recipe/base/Recipe";
import { RecipeWhereUniqueInput } from "../../recipe/base/RecipeWhereUniqueInput";
import { ShareFindManyArgs } from "../../share/base/ShareFindManyArgs";
import { Share } from "../../share/base/Share";
import { ShareWhereUniqueInput } from "../../share/base/ShareWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isActive: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isActive: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isActive: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          isActive: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          isActive: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/challenges")
  @ApiNestedQuery(ChallengeFindManyArgs)
  async findChallenges(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Challenge[]> {
    const query = plainToClass(ChallengeFindManyArgs, request.query);
    const results = await this.service.findChallenges(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        isActive: true,
        startTime: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/challenges")
  async connectChallenges(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      challenges: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/challenges")
  async updateChallenges(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      challenges: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/challenges")
  async disconnectChallenges(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      challenges: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/comments")
  @ApiNestedQuery(CommentFindManyArgs)
  async findComments(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Comment[]> {
    const query = plainToClass(CommentFindManyArgs, request.query);
    const results = await this.service.findComments(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        recipe: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comments")
  async connectComments(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comments")
  async updateComments(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comments")
  async disconnectComments(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/discussionForums")
  @ApiNestedQuery(DiscussionForumFindManyArgs)
  async findDiscussionForums(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<DiscussionForum[]> {
    const query = plainToClass(DiscussionForumFindManyArgs, request.query);
    const results = await this.service.findDiscussionForums(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/discussionForums")
  async connectDiscussionForums(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DiscussionForumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discussionForums: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/discussionForums")
  async updateDiscussionForums(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DiscussionForumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discussionForums: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/discussionForums")
  async disconnectDiscussionForums(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DiscussionForumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discussionForums: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/likes")
  @ApiNestedQuery(LikeFindManyArgs)
  async findLikes(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Like[]> {
    const query = plainToClass(LikeFindManyArgs, request.query);
    const results = await this.service.findLikes(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        recipe: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/likes")
  async connectLikes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/likes")
  async updateLikes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/likes")
  async disconnectLikes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/liveSessions")
  @ApiNestedQuery(LiveSessionFindManyArgs)
  async findLiveSessions(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<LiveSession[]> {
    const query = plainToClass(LiveSessionFindManyArgs, request.query);
    const results = await this.service.findLiveSessions(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        startTime: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/liveSessions")
  async connectLiveSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LiveSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      liveSessions: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/liveSessions")
  async updateLiveSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LiveSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      liveSessions: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/liveSessions")
  async disconnectLiveSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LiveSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      liveSessions: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/posts")
  @ApiNestedQuery(PostFindManyArgs)
  async findPosts(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Post[]> {
    const query = plainToClass(PostFindManyArgs, request.query);
    const results = await this.service.findPosts(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/posts")
  async connectPosts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/posts")
  async updatePosts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/posts")
  async disconnectPosts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/recipes")
  @ApiNestedQuery(RecipeFindManyArgs)
  async findRecipes(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Recipe[]> {
    const query = plainToClass(RecipeFindManyArgs, request.query);
    const results = await this.service.findRecipes(params.id, {
      ...query,
      select: {
        cookingTime: true,
        createdAt: true,
        description: true,
        id: true,
        image: true,
        ingredients: true,
        instructions: true,
        isPublished: true,
        preparationTime: true,
        servings: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        video: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recipes")
  async connectRecipes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RecipeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipes: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recipes")
  async updateRecipes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RecipeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipes: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recipes")
  async disconnectRecipes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RecipeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipes: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/shares")
  @ApiNestedQuery(ShareFindManyArgs)
  async findShares(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Share[]> {
    const query = plainToClass(ShareFindManyArgs, request.query);
    const results = await this.service.findShares(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        recipe: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/shares")
  async connectShares(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shares: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/shares")
  async updateShares(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shares: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/shares")
  async disconnectShares(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shares: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
