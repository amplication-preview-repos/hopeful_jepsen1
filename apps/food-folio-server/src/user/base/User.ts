/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Challenge } from "../../challenge/base/Challenge";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { Comment } from "../../comment/base/Comment";
import { DiscussionForum } from "../../discussionForum/base/DiscussionForum";
import { Like } from "../../like/base/Like";
import { LiveSession } from "../../liveSession/base/LiveSession";
import { Post } from "../../post/base/Post";
import { Recipe } from "../../recipe/base/Recipe";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { Share } from "../../share/base/Share";

@ObjectType()
class User {
  @ApiProperty({
    required: false,
    type: () => [Challenge],
  })
  @ValidateNested()
  @Type(() => Challenge)
  @IsOptional()
  challenges?: Array<Challenge>;

  @ApiProperty({
    required: false,
    type: () => [Comment],
  })
  @ValidateNested()
  @Type(() => Comment)
  @IsOptional()
  comments?: Array<Comment>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [DiscussionForum],
  })
  @ValidateNested()
  @Type(() => DiscussionForum)
  @IsOptional()
  discussionForums?: Array<DiscussionForum>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Like],
  })
  @ValidateNested()
  @Type(() => Like)
  @IsOptional()
  likes?: Array<Like>;

  @ApiProperty({
    required: false,
    type: () => [LiveSession],
  })
  @ValidateNested()
  @Type(() => LiveSession)
  @IsOptional()
  liveSessions?: Array<LiveSession>;

  @ApiProperty({
    required: false,
    type: () => [Post],
  })
  @ValidateNested()
  @Type(() => Post)
  @IsOptional()
  posts?: Array<Post>;

  @ApiProperty({
    required: false,
    type: () => [Recipe],
  })
  @ValidateNested()
  @Type(() => Recipe)
  @IsOptional()
  recipes?: Array<Recipe>;

  @ApiProperty({
    required: true,
  })
  @IsJSONValue()
  @Field(() => GraphQLJSON)
  roles!: JsonValue;

  @ApiProperty({
    required: false,
    type: () => [Share],
  })
  @ValidateNested()
  @Type(() => Share)
  @IsOptional()
  shares?: Array<Share>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;
}

export { User as User };
