/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Recipe as PrismaRecipe,
  Comment as PrismaComment,
  Like as PrismaLike,
  Share as PrismaShare,
  User as PrismaUser,
} from "@prisma/client";

export class RecipeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RecipeCountArgs, "select">): Promise<number> {
    return this.prisma.recipe.count(args);
  }

  async recipes<T extends Prisma.RecipeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecipeFindManyArgs>
  ): Promise<PrismaRecipe[]> {
    return this.prisma.recipe.findMany<Prisma.RecipeFindManyArgs>(args);
  }
  async recipe<T extends Prisma.RecipeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecipeFindUniqueArgs>
  ): Promise<PrismaRecipe | null> {
    return this.prisma.recipe.findUnique(args);
  }
  async createRecipe<T extends Prisma.RecipeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecipeCreateArgs>
  ): Promise<PrismaRecipe> {
    return this.prisma.recipe.create<T>(args);
  }
  async updateRecipe<T extends Prisma.RecipeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecipeUpdateArgs>
  ): Promise<PrismaRecipe> {
    return this.prisma.recipe.update<T>(args);
  }
  async deleteRecipe<T extends Prisma.RecipeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecipeDeleteArgs>
  ): Promise<PrismaRecipe> {
    return this.prisma.recipe.delete(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.recipe
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findLikes(
    parentId: string,
    args: Prisma.LikeFindManyArgs
  ): Promise<PrismaLike[]> {
    return this.prisma.recipe
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .likes(args);
  }

  async findShares(
    parentId: string,
    args: Prisma.ShareFindManyArgs
  ): Promise<PrismaShare[]> {
    return this.prisma.recipe
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shares(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.recipe
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
