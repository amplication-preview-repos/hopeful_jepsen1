/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Share as PrismaShare,
  Post as PrismaPost,
  Recipe as PrismaRecipe,
  User as PrismaUser,
} from "@prisma/client";

export class ShareServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ShareCountArgs, "select">): Promise<number> {
    return this.prisma.share.count(args);
  }

  async shares<T extends Prisma.ShareFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShareFindManyArgs>
  ): Promise<PrismaShare[]> {
    return this.prisma.share.findMany<Prisma.ShareFindManyArgs>(args);
  }
  async share<T extends Prisma.ShareFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShareFindUniqueArgs>
  ): Promise<PrismaShare | null> {
    return this.prisma.share.findUnique(args);
  }
  async createShare<T extends Prisma.ShareCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShareCreateArgs>
  ): Promise<PrismaShare> {
    return this.prisma.share.create<T>(args);
  }
  async updateShare<T extends Prisma.ShareUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShareUpdateArgs>
  ): Promise<PrismaShare> {
    return this.prisma.share.update<T>(args);
  }
  async deleteShare<T extends Prisma.ShareDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShareDeleteArgs>
  ): Promise<PrismaShare> {
    return this.prisma.share.delete(args);
  }

  async getPost(parentId: string): Promise<PrismaPost | null> {
    return this.prisma.share
      .findUnique({
        where: { id: parentId },
      })
      .post();
  }

  async getRecipe(parentId: string): Promise<PrismaRecipe | null> {
    return this.prisma.share
      .findUnique({
        where: { id: parentId },
      })
      .recipe();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.share
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
